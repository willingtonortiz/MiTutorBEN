// <auto-generated />
using System;
using MiTutorBEN.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MiTutorBEN.Migrations
{
    [DbContext(typeof(MiTutorContext))]
    partial class MiTutorContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MiTutorBEN.Models.AvailabilityDay", b =>
                {
                    b.Property<int>("AvailabilityDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Day")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("AvailabilityDayId");

                    b.HasIndex("TutorId");

                    b.ToTable("availabilitydays");
                });

            modelBuilder.Entity("MiTutorBEN.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("CourseId");

                    b.HasIndex("UniversityId");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("MiTutorBEN.Models.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId");

                    b.HasIndex("UniversityId");

                    b.ToTable("people");
                });

            modelBuilder.Entity("MiTutorBEN.Models.Plan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.HasKey("PlanId");

                    b.ToTable("plans");
                });

            modelBuilder.Entity("MiTutorBEN.Models.Qualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdresseeId")
                        .HasColumnType("integer");

                    b.Property<int>("AdresserId")
                        .HasColumnType("integer");

                    b.Property<string>("AdresserRole")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int>("TutoringSessionId")
                        .HasColumnType("integer");

                    b.HasKey("QualificationId");

                    b.HasIndex("AdresseeId");

                    b.HasIndex("AdresserId");

                    b.HasIndex("TutoringSessionId");

                    b.ToTable("qualifications");
                });

            modelBuilder.Entity("MiTutorBEN.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<int>("QualificationCount")
                        .HasColumnType("integer");

                    b.HasKey("StudentId");

                    b.ToTable("students");
                });

            modelBuilder.Entity("MiTutorBEN.Models.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("MiTutorBEN.Models.StudentTutoringSession", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TutoringSessionId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "TutoringSessionId");

                    b.HasIndex("TutoringSessionId");

                    b.ToTable("StudentTutoringSession");
                });

            modelBuilder.Entity("MiTutorBEN.Models.Suscription", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("integer");

                    b.Property<int>("PlanId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("SuscriptionId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId", "PlanId");

                    b.HasAlternateKey("SuscriptionId");

                    b.HasIndex("PlanId");

                    b.ToTable("suscriptions");
                });

            modelBuilder.Entity("MiTutorBEN.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TopicId");

                    b.HasIndex("CourseId");

                    b.ToTable("topics");
                });

            modelBuilder.Entity("MiTutorBEN.Models.TopicTutoringOffer", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int>("TutoringOfferId")
                        .HasColumnType("integer");

                    b.HasKey("TopicId", "TutoringOfferId");

                    b.HasIndex("TutoringOfferId");

                    b.ToTable("TopicTutoringOffer");
                });

            modelBuilder.Entity("MiTutorBEN.Models.TopicTutoringSession", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int>("TutoringSessionId")
                        .HasColumnType("integer");

                    b.HasKey("TopicId", "TutoringSessionId");

                    b.HasIndex("TutoringSessionId");

                    b.ToTable("TopicTutoringSession");
                });

            modelBuilder.Entity("MiTutorBEN.Models.Tutor", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<int>("QualificationCount")
                        .HasColumnType("integer");

                    b.HasKey("TutorId");

                    b.ToTable("tutors");
                });

            modelBuilder.Entity("MiTutorBEN.Models.TutorCourse", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.HasKey("TutorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TutorCourse");
                });

            modelBuilder.Entity("MiTutorBEN.Models.TutoringOffer", b =>
                {
                    b.Property<int>("TutoringOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.Property<int?>("UniversityId")
                        .HasColumnType("integer");

                    b.HasKey("TutoringOfferId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TutorId");

                    b.HasIndex("UniversityId");

                    b.ToTable("tutoringoffers");
                });

            modelBuilder.Entity("MiTutorBEN.Models.TutoringSession", b =>
                {
                    b.Property<int>("TutoringSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("TutoringSessionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TutorId");

                    b.ToTable("tutoringsessions");
                });

            modelBuilder.Entity("MiTutorBEN.Models.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UniversityId");

                    b.ToTable("universities");
                });

            modelBuilder.Entity("MiTutorBEN.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("MiTutorBEN.Models.AvailabilityDay", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Tutor", "Tutor")
                        .WithMany("AvailabilityDays")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.Course", b =>
                {
                    b.HasOne("MiTutorBEN.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.Person", b =>
                {
                    b.HasOne("MiTutorBEN.Models.University", "University")
                        .WithMany("Persons")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.Qualification", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Person", "Adressee")
                        .WithMany("QualificationsGiven")
                        .HasForeignKey("AdresseeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.Person", "Adresser")
                        .WithMany("QualificationsReceived")
                        .HasForeignKey("AdresserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.TutoringSession", "TutoringSession")
                        .WithMany("Qualifications")
                        .HasForeignKey("TutoringSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.Student", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Person", "Person")
                        .WithOne("Student")
                        .HasForeignKey("MiTutorBEN.Models.Student", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.StudentCourse", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.StudentTutoringSession", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Student", "Student")
                        .WithMany("StudentTutoringSessions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.TutoringSession", "TutoringSession")
                        .WithMany("StudentTutoringSessions")
                        .HasForeignKey("TutoringSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.Suscription", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Person", "Person")
                        .WithMany("Suscriptions")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.Plan", "Plan")
                        .WithMany("Suscriptions")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.Topic", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.TopicTutoringOffer", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Topic", "Topic")
                        .WithMany("TopicTutoringOffers")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.TutoringOffer", "TutoringOffer")
                        .WithMany("TopicTutoringOffers")
                        .HasForeignKey("TutoringOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.TopicTutoringSession", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Topic", "Topic")
                        .WithMany("TopicTutoringSessions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.TutoringSession", "TutoringSession")
                        .WithMany("TopicTutoringSessions")
                        .HasForeignKey("TutoringSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.Tutor", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Person", "Person")
                        .WithOne("Tutor")
                        .HasForeignKey("MiTutorBEN.Models.Tutor", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.TutorCourse", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Course", "Course")
                        .WithMany("TutorCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.Tutor", "Tutor")
                        .WithMany("TutorCourses")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.TutoringOffer", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("MiTutorBEN.Models.Tutor", "Tutor")
                        .WithMany("TutoringOffers")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Models.University", "University")
                        .WithMany()
                        .HasForeignKey("UniversityId");
                });

            modelBuilder.Entity("MiTutorBEN.Models.TutoringSession", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("MiTutorBEN.Models.Tutor", "Tutor")
                        .WithMany("TutoringSessions")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Models.User", b =>
                {
                    b.HasOne("MiTutorBEN.Models.Person", "Person")
                        .WithOne("User")
                        .HasForeignKey("MiTutorBEN.Models.User", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
