// <auto-generated />
using System;
using MiTutorBEN.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MiTutorBEN.Migrations
{
    [DbContext(typeof(MiTutorContext))]
    [Migration("20191011032337_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MiTutorBEN.Entities.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("AvailabilityId");

                    b.HasIndex("TutorId")
                        .IsUnique();

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.AvailabilityDay", b =>
                {
                    b.Property<int>("AvailabilityDayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AvailabilityId")
                        .HasColumnType("integer");

                    b.Property<string>("Day")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("AvailabilityDayId");

                    b.HasIndex("AvailabilityId");

                    b.ToTable("AvailabilityDay");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.Property<int>("UniversityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("PersonId");

                    b.HasIndex("UniversityId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Person");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Qualification", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AdresseeId")
                        .HasColumnType("integer");

                    b.Property<int>("AdresserId")
                        .HasColumnType("integer");

                    b.Property<string>("AdresserRole")
                        .HasColumnType("text");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<int>("Rate")
                        .HasColumnType("integer");

                    b.Property<int>("TutoringSessionId")
                        .HasColumnType("integer");

                    b.HasKey("QualificationId");

                    b.HasIndex("AdresseeId");

                    b.HasIndex("AdresserId");

                    b.HasIndex("TutoringSessionId");

                    b.ToTable("Qualification");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("StudentId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourse");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.StudentTutoringSession", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.Property<int>("TutoringSessionId")
                        .HasColumnType("integer");

                    b.HasKey("StudentId", "TutoringSessionId");

                    b.HasIndex("TutoringSessionId");

                    b.ToTable("StudentTutoringSession");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("TopicId");

                    b.HasIndex("CourseId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TopicTutoringOffer", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int>("TutoringOfferId")
                        .HasColumnType("integer");

                    b.Property<int?>("TutoringSessionId")
                        .HasColumnType("integer");

                    b.HasKey("TopicId", "TutoringOfferId");

                    b.HasIndex("TutoringOfferId");

                    b.HasIndex("TutoringSessionId");

                    b.ToTable("TopicTutoringOffer");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TopicTutoringSession", b =>
                {
                    b.Property<int>("TopicId")
                        .HasColumnType("integer");

                    b.Property<int>("TutoringSessionId")
                        .HasColumnType("integer");

                    b.HasKey("TopicId", "TutoringSessionId");

                    b.HasIndex("TutoringSessionId");

                    b.ToTable("TopicTutoringSession");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Tutor", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.HasKey("TutorId");

                    b.ToTable("Tutor");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TutorCourse", b =>
                {
                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.HasKey("TutorId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("TutorCourse");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TutoringOffer", b =>
                {
                    b.Property<int>("TutoringOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("TutoringOfferId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutoringOffer");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TutoringSession", b =>
                {
                    b.Property<int>("TutoringSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int?>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Place")
                        .HasColumnType("text");

                    b.Property<int>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("TutoringSessionId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TutorId");

                    b.ToTable("TutoringSession");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("UniversityId");

                    b.ToTable("University");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Availability", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Tutor", "Tutor")
                        .WithOne("Availability")
                        .HasForeignKey("MiTutorBEN.Entities.Availability", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.AvailabilityDay", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Availability", "Availability")
                        .WithMany("AvailabilityDays")
                        .HasForeignKey("AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Person", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.University", "University")
                        .WithMany("Persons")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.User", "User")
                        .WithOne("Person")
                        .HasForeignKey("MiTutorBEN.Entities.Person", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Qualification", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Person", "Adressee")
                        .WithMany("QualificationsGiven")
                        .HasForeignKey("AdresseeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.Person", "Adresser")
                        .WithMany("QualificationsReceived")
                        .HasForeignKey("AdresserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.TutoringSession", "TutoringSession")
                        .WithMany("Qualifications")
                        .HasForeignKey("TutoringSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Student", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Person", "Person")
                        .WithOne("Student")
                        .HasForeignKey("MiTutorBEN.Entities.Student", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.StudentCourse", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Course", "Course")
                        .WithMany("StudentCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.Student", "Student")
                        .WithMany("StudentCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.StudentTutoringSession", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Student", "Student")
                        .WithMany("StudentTutoringSessions")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.TutoringSession", "TutoringSession")
                        .WithMany("StudentTutoringSessions")
                        .HasForeignKey("TutoringSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Topic", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Course", "Course")
                        .WithMany("Topics")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TopicTutoringOffer", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Topic", "Topic")
                        .WithMany("TopicTutoringOffers")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.TutoringOffer", "TutoringOffer")
                        .WithMany("TopicTutoringOffers")
                        .HasForeignKey("TutoringOfferId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.TutoringSession", null)
                        .WithMany("TopicTutoringOffers")
                        .HasForeignKey("TutoringSessionId");
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TopicTutoringSession", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Topic", "Topic")
                        .WithMany("TopicTutoringSessions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.TutoringSession", "TutoringSession")
                        .WithMany("TopicTutoringSessions")
                        .HasForeignKey("TutoringSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.Tutor", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Person", "Person")
                        .WithOne("Tutor")
                        .HasForeignKey("MiTutorBEN.Entities.Tutor", "TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TutorCourse", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Course", "Course")
                        .WithMany("TutorCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiTutorBEN.Entities.Tutor", "Tutor")
                        .WithMany("TutorCourses")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TutoringOffer", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("MiTutorBEN.Entities.Tutor", "Tutor")
                        .WithMany("TutoringOffers")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiTutorBEN.Entities.TutoringSession", b =>
                {
                    b.HasOne("MiTutorBEN.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("MiTutorBEN.Entities.Tutor", "Tutor")
                        .WithMany("TutoringSessions")
                        .HasForeignKey("TutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
